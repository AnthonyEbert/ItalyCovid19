
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Johns-Hopkins format
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(glue)

Attaching package: ‘glue’

The following object is masked from ‘package:dplyr’:

    collapse

> require(lubridate)
Loading required package: lubridate

Attaching package: ‘lubridate’

The following object is masked from ‘package:base’:

    date

> require(stringr)
Loading required package: stringr
> 
> x = readr::read_csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
Parsed with column specification:
cols(
  data = col_datetime(format = ""),
  stato = col_character(),
  codice_regione = col_character(),
  denominazione_regione = col_character(),
  lat = col_double(),
  long = col_double(),
  ricoverati_con_sintomi = col_double(),
  terapia_intensiva = col_double(),
  totale_ospedalizzati = col_double(),
  isolamento_domiciliare = col_double(),
  totale_attualmente_positivi = col_double(),
  nuovi_attualmente_positivi = col_double(),
  dimessi_guariti = col_double(),
  deceduti = col_double(),
  totale_casi = col_double(),
  tamponi = col_double()
)
> x$data <- lubridate::as_date(x$data)
> x$codice_regione <- as.numeric(x$codice_regione)
> 
> level_tst <- levels(factor(x$denominazione_regione[which(x$codice_regione == 4)]))
> x$codice_regione[which(x$denominazione_regione == level_tst[2])] = -1
> 
> x <- x %>%
+   group_by(codice_regione) %>%
+   arrange(data) %>%
+   mutate(denominazione_regione = first(denominazione_regione)) %>%
+   ungroup()
> 
> x <- x %>%
+   select(
+     data,
+     denominazione_regione,
+     stato,
+     lat,
+     long,
+     totale_casi,
+     dimessi_guariti,
+     deceduti
+   ) %>%
+   rename(
+     `Province/State` = "denominazione_regione",
+     Lat = "lat",
+     Long = "long"
+   ) %>%
+   mutate(
+     data = str_trim(glue("{month(data)}/{day(data)}/{substr(year(data), 3, 4)}"))
+   ) %>%
+   rename(`Country/Region` = stato) %>%
+   mutate(`Country/Region` = "Italy")
> 
> x_confirmed <- x %>%
+   select(-dimessi_guariti, -deceduti) %>%
+   tidyr::pivot_wider(id_cols = c(`Province/State`, `Country/Region`,  "Lat", "Long"), names_from = data, values_from = totale_casi) %>% mutate_all(funs(tidyr::replace_na(.,0)))
Warning message:
funs() is soft deprecated as of dplyr 0.8.0
Please use a list of either functions or lambdas: 

  # Simple named list: 
  list(mean = mean, median = median)

  # Auto named with `tibble::lst()`: 
  tibble::lst(mean, median)

  # Using lambdas
  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))
This warning is displayed once per session. 
> 
> readr::write_csv(x_confirmed, "johns-hopkins-format/time_series_19-covid-Confirmed_Italy.csv")
> 
> x_deaths <- x %>%
+   select(-dimessi_guariti, -totale_casi) %>%
+   tidyr::pivot_wider(id_cols = c(`Province/State`, `Country/Region`,  "Lat", "Long"), names_from = data, values_from = deceduti) %>% mutate_all(funs(tidyr::replace_na(.,0)))
> 
> readr::write_csv(x_deaths, "johns-hopkins-format/time_series_19-covid-Deaths_Italy.csv")
> 
> x_recovered <- x %>%
+   select(-deceduti, -totale_casi) %>%
+   tidyr::pivot_wider(id_cols = c(`Province/State`, `Country/Region`,  "Lat", "Long"), names_from = data, values_from = dimessi_guariti) %>% mutate_all(funs(tidyr::replace_na(.,0)))
> 
> readr::write_csv(x_recovered, "johns-hopkins-format/time_series_19-covid-Recovered_Italy.csv")
> 
> proc.time()
   user  system elapsed 
  1.448   0.300   1.420 
